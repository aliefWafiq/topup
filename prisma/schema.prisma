// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusTransaksi {
  PENDING
  PROCESSING  
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PAID
}

model Transaksi {
  id_transaksi    String   @id @default(cuid())
  id_user         String
  id_gameUser     String
  kode_produk     String
  operator_produk String
  server          String
  harga           Int
  status          StatusTransaksi @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user User @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          String    @default("user")
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  transaksi     Transaksi[]
  usedDiscounts   UsedDiscount[]

  @@map("users")
}

model Discount {
  id              String    @id @default(cuid())
  nama_diskon     String
  kode_diskon     String   @unique
  persentase      Float
  berlaku_hingga  DateTime
  status          Boolean   @default(true)
  created_at      DateTime  @default(now())

  usedBy  UsedDiscount[]
}

model UsedDiscount {
  id             String    @id @default(cuid())
  userId         String
  discountId     String
  usedAt         DateTime      @default(now())
  user           User      @relation(fields: [userId], references: [id])
  discount       Discount  @relation(fields: [discountId], references: [id])

  @@unique([userId, discountId])
}

model DataKeuangan {
  id            String    @id @default(cuid())
  periode       DateTime
  total         Int
  totalBersih   Int
}

model PaymentLink {
  id                String   @id @default(cuid())
  id_transaksi      String
  link_payment      String
}